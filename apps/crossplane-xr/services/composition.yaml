apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xservices.bootstrap.demo.com
  labels:
    provider: helm
spec:
  compositeTypeRef:
    apiVersion: bootstrap.demo.com/v1alpha1
    kind: XServices
  writeConnectionSecretsToNamespace: crossplane-system

  patchSets:
    - name: metadata
      patches:
        - fromFieldPath: metadata.labels

    - name: helm-config
      patches:
        # All Helm releases derive their labels and annotations from the XR.
        - fromFieldPath: metadata.labels
          toFieldPath: metadata.labels

        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations

        # All Helm releases derive the ProviderConfig to use from the XR.
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath

    - name: irsa-config
      patches:
        - fromFieldPath: spec.accountID
          toFieldPath: spec.parameters.accountID
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.parameters.clusterName
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.eks.iamoidc
          toFieldPath: spec.parameters.OIDCProvider
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

  resources:
    - name: kubernetes
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: spec.providerConfigRef.name
          toFieldPath: spec.credentials.secretRef.name
          type: FromCompositeFieldPath
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
      readinessChecks:
        - type: None

    - name: configmap-cluster-info
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: cluster-info-cm
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: cluster-info
                namespace: default
              data: {}
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.data.clusterName
          type: FromCompositeFieldPath

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.manifest.data.accountID
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.parameters.sourceCidrs[0]
          toFieldPath: spec.forProvider.manifest.data.sourceCidrs
          type: FromCompositeFieldPath

    - name: karpenter-default-provider
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: cluster-info-cm
        spec:
          # references:
          # - dependsOn:
          #     apiVersion: helm.crossplane.io/v1beta1
          #     kind: Release
          forProvider:
            manifest:
              apiVersion: karpenter.sh/v1alpha5
              kind: Provisioner
              metadata:
                name: default
              spec:
                requirements:
                  - key: "topology.kubernetes.io/zone"
                    operator: In
                    values: ["ap-southeast-2a"]

                  - key: karpenter.sh/capacity-type
                    operator: In
                    values: ["spot"]

                limits:
                  resources:
                    cpu: 20
                provider:
                  subnetSelector:
                    access: public
                  securityGroupSelector:
                    aws:eks:cluster-name: demo
                ttlSecondsAfterEmpty: 30

      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: "spec.forProvider.manifest.spec.provider.securityGroupSelector[aws:eks:cluster-name]"
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        # - fromFieldPath: spec.id
        #   toFieldPath: spec.references[0].dependsOn.name
        #   type: FromCompositeFieldPath
        #   transforms:
        #     - type: string
        #       string:
        #         fmt: "helm-karpenter-%s"
        #         type: Format

    #TODO: Remove this from here
    - name: letsencrypt-issuer-staging
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: letsencrypt-staging
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: letsencrypt-staging
              spec:
                acme:
                  server: https://acme-staging-v02.api.letsencrypt.org/directory
                  privateKeySecretRef:
                    name: letsencrypt-staging-key
                  solvers:
                    - http01:
                        ingress:
                          class: nginx

      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.parameters.email
          toFieldPath: spec.forProvider.manifest.spec.acme.email
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    #TODO: Remove this from here
    - name: letsencrypt-issuer-production
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: letsencrypt-production
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: letsencrypt
              spec:
                acme:
                  server: https://acme-v02.api.letsencrypt.org/directory
                  privateKeySecretRef:
                    name: letsencrypt-production-key
                  solvers:
                    - http01:
                        ingress:
                          class: nginx

      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.parameters.email
          toFieldPath: spec.forProvider.manifest.spec.acme.email
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: helm
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: spec.providerConfigRef.name
          toFieldPath: spec.credentials.secretRef.name
          type: FromCompositeFieldPath
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
      readinessChecks:
        - type: None

    - name: karpenter
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: karpenter
            chart:
              name: karpenter
              repository: https://charts.karpenter.sh/
              version: "0.11.1"
            values:
              nameOverride: karpenter
              fullnameOverride: karpenter
              clusterName: cluster
              clusterEndpoint: endpoint
              aws:
                defaultInstanceProfile: instance-profile
              serviceAccount:
                name: karpenter
                annotations: {}
      patches:
        - type: PatchSet
          patchSetName: helm-config

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.controller.image
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/public.ecr.aws/karpenter/controller:v0.11.1"
              type: Format

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.webhook.image
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/public.ecr.aws/karpenter/webhook:v0.11.1"
              type: Format

        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "helm-karpenter-%s"
              type: Format
          type: FromCompositeFieldPath

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.values.clusterName
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.values.aws.defaultInstanceProfile
          transforms:
          - type: string
            string:
              fmt: "karpenter-node-%s"
              type: Format
          type: FromCompositeFieldPath

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.id
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:role/karpenter-%s"
          toFieldPath: "spec.forProvider.values.serviceAccount.annotations[eks.amazonaws.com/role-arn]"

    - name: image-swapper
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: kube-system
            chart:
              name: k8s-image-swapper
              repository: https://estahn.github.io/charts/
              version: "1.6.1"
            values:
              nameOverride: k8s-image-swapper
              fullnameOverride: k8s-image-swapper
              image:
                tag: "1.5.0"
              serviceAccount:
                name: k8s-image-swapper
              config:
                target:
                  aws:
                    region: ap-southeast-2
      patches:
        - type: PatchSet
          patchSetName: helm-config

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.config.target.aws.accountId
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "helm-k8s-image-swapper-%s"
              type: Format

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.id
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:role/k8s-image-swapper-%s"
          toFieldPath: "spec.forProvider.values.serviceAccount.annotations[eks.amazonaws.com/role-arn]"

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/ghcr.io/estahn/k8s-image-swapper"
              type: Format

        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: argocd
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: argocd
            chart:
              name: argo-cd
              repository: https://argoproj.github.io/argo-helm
              version: "5.28.1"
            values:
              fullnameOverride: argocd
              global:
                image:
                  repository: quay.io/argoproj/argocd
              dex:
                image:
                  repository: ghcr.io/dexidp/dex
              redis:
                image:
                  repository: redis
              controller:
                args:
                  appResyncPeriod: 30
              server:
                extraArgs:
                  - --insecure
                  - --enable-gzip
                ingress:
                  enabled: true
                  hosts:
                    - ingress.local
                  ingressClassName: nginx
                  annotations:
                    ingress.kubernetes.io/ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                    cert-manager.io/cluster-issuer: letsencrypt-staging
                  tls:
                      - hosts:
                          - ingress.local
                        secretName: letsencrypt-cert

      patches:
        - type: PatchSet
          patchSetName: helm-config

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.redis.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/docker.io/library/redis"
              type: Format

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.dex.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/ghcr.io/dexidp/dex"
              type: Format

        - fromFieldPath: spec.accountID
          toFieldPath: spec.forProvider.values.global.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/quay.io/argoproj/argocd"
              type: Format

        # - fromFieldPath: spec.id
        #   toFieldPath: spec.providerConfigRef.name
        #   type: FromCompositeFieldPath
        #   policy:
        #     fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.id
              - fromFieldPath: spec.parameters.domain
            strategy: string
            string:
              fmt: "%s-argo.%s"
          toFieldPath: spec.forProvider.values.server.ingress.hosts[0]
          policy:
            fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.id
              - fromFieldPath: spec.parameters.domain
            strategy: string
            string:
              fmt: "%s-argo.%s"
          toFieldPath: spec.forProvider.values.server.ingress.tls[0].hosts[0]
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: bootstrap
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: argocd
            chart:
              name: bootstrap-cluster
              repository:  https://sanyu.github.io/helm-charts/
              version: "0.2.0"
            values:
              bootstrapPath: eks
      patches:
        - type: PatchSet
          patchSetName: helm-config

        # - fromFieldPath: spec.id
        #   toFieldPath: spec.providerConfigRef.name
        #   type: FromCompositeFieldPath
        #   policy:
        #     fromFieldPath: Required

        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    # Don't move this to ArgoCD so that we can delete the NLB when
    # destroying the cluster
    - name: nginx
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: ingress-nginx
            chart:
              name: ingress-nginx
              repository: https://kubernetes.github.io/ingress-nginx
              version: "4.6.0"
            values:
              controller:
                service:
                  # loadBalancerSourceRanges:
                  #   - "0.0.0.0/0"
                  annotations:
                    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
                    service.beta.kubernetes.io/aws-load-balancer-type: nlb
      patches:
        - type: PatchSet
          patchSetName: helm-config

        # - fromFieldPath: spec.parameters.sourceCidrs
        #   toFieldPath: spec.forProvider.values.controller.service.loadBalancerSourceRanges
        #   type: FromCompositeFieldPath
        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: ebs-csi-driver
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: kube-system
            chart:
              name: aws-ebs-csi-driver
              repository: https://kubernetes-sigs.github.io/aws-ebs-csi-driver
              version: "2.17.2"
            values:
              controller:
                serviceAccount:
                  name: ebs-csi-node
                  annotations: {}
      patches:
        - type: PatchSet
          patchSetName: helm-config

        # - fromFieldPath: spec.parameters.sourceCidrs
        #   toFieldPath: spec.forProvider.values.controller.service.loadBalancerSourceRanges
        #   type: FromCompositeFieldPath
        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.id
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:role/ebs-csi-node-%s"
          toFieldPath: "spec.forProvider.values.controller.serviceAccount.annotations[eks.amazonaws.com/role-arn]"

    #TODO: move external-dns out of here
    - name: external-dns
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: external-dns
            chart:
              name: external-dns
              repository: https://charts.bitnami.com/bitnami
              version: "6.5.6"
            values:
              image:
                registry: public.ecr.aws
              fullnameOverride: external-dns
              policy: sync
              aws:
                zoneType: public
                region: ap-southeast-2
              serviceAccount:
                name: external-dns
                annotations: {}
      patches:
        - type: PatchSet
          patchSetName: helm-config

        - fromFieldPath: spec.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.id
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:role/external-dns-%s"
          toFieldPath: "spec.forProvider.values.serviceAccount.annotations[eks.amazonaws.com/role-arn]"


    - name: irsa-ebs-csi-driver
      base:
        apiVersion: iam.demo.com/v1alpha1
        kind: XIamRoleForServiceAccount
        spec:
          parameters:
            serviceAccountName: ebs-csi-node
            namespace: kube-system
            policyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:CreateSnapshot",
                      "ec2:AttachVolume",
                      "ec2:DetachVolume",
                      "ec2:ModifyVolume",
                      "ec2:DescribeAvailabilityZones",
                      "ec2:DescribeInstances",
                      "ec2:DescribeSnapshots",
                      "ec2:DescribeTags",
                      "ec2:DescribeVolumes",
                      "ec2:DescribeVolumesModifications"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:CreateTags"
                    ],
                    "Resource": [
                      "arn:aws:ec2:*:*:volume/*",
                      "arn:aws:ec2:*:*:snapshot/*"
                    ],
                    "Condition": {
                      "StringEquals": {
                        "ec2:CreateAction": [
                          "CreateVolume",
                          "CreateSnapshot"
                        ]
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DeleteTags"
                    ],
                    "Resource": [
                      "arn:aws:ec2:*:*:volume/*",
                      "arn:aws:ec2:*:*:snapshot/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:CreateVolume"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:CreateVolume"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "aws:RequestTag/CSIVolumeName": "*"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DeleteVolume"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DeleteVolume"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "ec2:ResourceTag/CSIVolumeName": "*"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DeleteVolume"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "ec2:ResourceTag/kubernetes.io/created-for/pvc/name": "*"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DeleteSnapshot"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
                      }
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DeleteSnapshot"
                    ],
                    "Resource": "*",
                    "Condition": {
                      "StringLike": {
                        "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
                      }
                    }
                  }
                ]
              }

      patches:
        - type: PatchSet
          patchSetName: irsa-config

    - name: irsa-k8s-image-swapper
      base:
        apiVersion: iam.demo.com/v1alpha1
        kind: XIamRoleForServiceAccount
        spec:
          parameters:
            serviceAccountName: k8s-image-swapper
            namespace: kube-system
      patches:
        - type: PatchSet
          patchSetName: irsa-config
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.accountID
              - fromFieldPath: spec.accountID
            strategy: string
            string:
              fmt: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Sid": "",
                      "Effect": "Allow",
                      "Action": [
                        "ecr:GetAuthorizationToken",
                        "ecr:DescribeRepositories",
                        "ecr:DescribeRegistry"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Sid": "",
                      "Effect": "Allow",
                      "Action": [
                        "ecr:UploadLayerPart",
                        "ecr:PutImage",
                        "ecr:ListImages",
                        "ecr:InitiateLayerUpload",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:CreateRepository",
                        "ecr:CompleteLayerUpload",
                        "ecr:BatchGetImage",
                        "ecr:BatchCheckLayerAvailability"
                      ],
                      "Resource": [
                        "arn:aws:ecr:*:%s:repository/docker.io/*",
                        "arn:aws:ecr:*:%s:repository/quay.io/*",
                        "arn:aws:ecr:*:%s:repository/ghcr.io/*",
                        "arn:aws:ecr:*:%s:repository/k8s.gcr.io/*",
                        "arn:aws:ecr:*:%s:repository/registry.k8s.io/*"
                      ]
                    }
                  ]
                }
          toFieldPath: spec.parameters.policyDocument
          policy:
            fromFieldPath: Required

    - name: irsa-external-dns
      base:
        apiVersion: iam.demo.com/v1alpha1
        kind: XIamRoleForServiceAccount
        spec:
          parameters:
            serviceAccountName: external-dns
            namespace: external-dns
            policyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "route53:ChangeResourceRecordSets"
                    ],
                    "Resource": [
                      "arn:aws:route53:::hostedzone/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "route53:ListHostedZones",
                      "route53:ListResourceRecordSets"
                    ],
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: irsa-config

    - name: irsa-karpenter
      base:
        apiVersion: iam.demo.com/v1alpha1
        kind: XIamRoleForServiceAccount
        spec:
          parameters:
            serviceAccountName: karpenter
            namespace: karpenter
            policyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:CreateLaunchTemplate",
                      "ec2:CreateFleet",
                      "ec2:RunInstances",
                      "ec2:CreateTags",
                      "iam:PassRole",
                      "ec2:TerminateInstances",
                      "ec2:DeleteLaunchTemplate",
                      "ec2:DescribeLaunchTemplates",
                      "ec2:DescribeInstances",
                      "ec2:DescribeSecurityGroups",
                      "ec2:DescribeSubnets",
                      "ec2:DescribeInstanceTypes",
                      "ec2:DescribeInstanceTypeOfferings",
                      "ec2:DescribeAvailabilityZones",
                      "ssm:GetParameter",
                      "route53:ListHostedZones",
                      "route53:ListResourceRecordSets"
                    ],
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: irsa-config
