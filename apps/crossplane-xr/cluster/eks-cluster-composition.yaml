apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks-cluster
  labels:
    provider: aws
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: demo.com/v1alpha1
    kind: XK8sCluster
  writeConnectionSecretsToNamespace: crossplane-system

  patchSets:
    - name: metadata
      patches:
        - fromFieldPath: metadata.labels
    - name: common-parameters
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"

  resources:
    - name: network
      base:
        apiVersion: aws.demo.com/v1alpha1
        kind: XNetwork
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.id

    - name: ekscluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            region: ap-southeast-2
            version: "1.22"
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
            resourcesVpcConfig:
              endpointPrivateAccess: true
              endpointPublicAccess: true
              publicAccessCidrs:
                - "0.0.0.0/0"
              subnetIdSelector:
                matchLabels:
                  type: subnet
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels[networks.aws.demo.com/network-id]
          type: FromCompositeFieldPath

        - fromFieldPath: spec.parameters.sourceCidrs
          toFieldPath: spec.forProvider.resourcesVpcConfig.publicAccessCidrs
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          type: FromCompositeFieldPath

        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.uid
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
          type: FromCompositeFieldPath

        - type: ToCompositeFieldPath
          fromFieldPath: spec.id
          toFieldPath: status.clusterName

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.status
          toFieldPath: status.controlPlaneStatus

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.eks.oidc
          policy:
            fromFieldPath: Optional

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.eks.iamoidc
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'https://'
          policy:
            fromFieldPath: Optional

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.endpoint
          toFieldPath: status.eks.endpoint
          policy:
            fromFieldPath: Optional

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.version
          toFieldPath: status.eks.version
          policy:
            fromFieldPath: Optional

      readinessChecks:
      - type: MatchString
        fieldPath: status.atProvider.status
        matchString: ACTIVE
      connectionDetails:
        - fromConnectionSecretKey: kubeconfig

    - name: eksnodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            region: ap-southeast-2
            capacityType: SPOT
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
            subnetSelector:
              matchLabels:
                type: subnet
                access: private
                zone: ap-southeast-2a
            scalingConfig:
              minSize: 1
              maxSize: 5
              desiredSize: 1
            instanceTypes:
              - t3.medium
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetSelector.matchLabels[networks.aws.demo.com/network-id]
          type: FromCompositeFieldPath

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.status
          toFieldPath: status.nodePoolStatus
      readinessChecks:
      - type: MatchString
        fieldPath: status.atProvider.status
        matchString: ACTIVE

    - name: iamrole-fargateprofile
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks-fargate-pods.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
        - type: string
          string:
            fmt: "%s-fargateprofile"
            type: Format
        type: FromCompositeFieldPath

      - fromFieldPath: spec.id
        toFieldPath: metadata.labels.role
        transforms:
        - type: string
          string:
            fmt: "%s-fargateprofile"
            type: Format
        type: FromCompositeFieldPath

    - name:  iamrolepolicy-fp
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
            roleNameSelector:
              matchControllerRef: true
      patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
        - type: string
          string:
            fmt: "%s-fp"
            type: Format
        type: FromCompositeFieldPath

      - fromFieldPath: spec.id
        toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
        transforms:
        - type: string
          string:
            fmt: "%s-fargateprofile"
            type: Format
        type: FromCompositeFieldPath

    - name: eksfargate-karpenter
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: FargateProfile
        spec:
          forProvider:
            region: ap-southeast-2
            clusterNameSelector:
              matchControllerRef: true
            podExecutionRoleArnSelector:
              matchControllerRef: true
            subnetSelector:
              matchLabels:
                access: private
            selectors:
              - namespace: karpenter
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetSelector.matchLabels[networks.aws.demo.com/network-id]
          type: FromCompositeFieldPath

        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.podExecutionRoleArnSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-fargateprofile"
                type: Format
          type: FromCompositeFieldPath

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.status
          toFieldPath: status.eks.karpenterFargateProfileStatus

      readinessChecks:
      - type: MatchString
        fieldPath: status.atProvider.status
        matchString: ACTIVE

    # - name: eksfargate-coredns
    #   base:
    #     apiVersion: eks.aws.crossplane.io/v1beta1
    #     kind: FargateProfile
    #     spec:
    #       forProvider:
    #         region: ap-southeast-2
    #         clusterNameSelector:
    #           matchControllerRef: true
    #         podExecutionRoleArnSelector:
    #           matchControllerRef: true
    #         subnetSelector:
    #           matchLabels:
    #             access: private
    #         selectors:
    #           - namespace: kube-system
    #             labels:
    #               k8s-app: kube-dns
    #   patches:
    #   - fromFieldPath: spec.id
    #     toFieldPath: metadata.name
    #     transforms:
    #       - type: string
    #         string:
    #           fmt: "%s-coredns"
    #           type: Format
    #     type: FromCompositeFieldPath
    #   - fromFieldPath: spec.id
    #     toFieldPath: spec.forProvider.podExecutionRoleArnSelector.matchLabels.role
    #     transforms:
    #       - type: string
    #         string:
    #           fmt: "%s-fargateprofile"
    #           type: Format
    #     type: FromCompositeFieldPath
    #
    #   - type: ToCompositeFieldPath
    #     fromFieldPath: status.atProvider.status
    #     toFieldPath: status.eks.karpenterFargateProfileStatus
    #
    #   readinessChecks:
    #   - type: MatchString
    #     fieldPath: status.atProvider.status
    #     matchString: ACTIVE


    - name: iamrole-controlplane
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: controlplane
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-controlplane-role"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: iamrole-nodegroup
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: nodegroup
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-nodegroup-role"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: iamattachment-controlplane
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane

    - name: iamattachment-service
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane

    - name: iamattachment-worker
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: iamattachment-cni
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: iamattachment-registry
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: iamattachment-ssm
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIDList:
              - sts.amazonaws.com
            thumbprintList:
              - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      name: oidcProvider
      patches:
        - fromFieldPath: status.eks.oidc
          toFieldPath: spec.forProvider.url
          policy:
            fromFieldPath: Required
          type: FromCompositeFieldPath


    - name: kubernetes
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.uid
          toFieldPath: spec.credentials.secretRef.name
          type: FromCompositeFieldPath
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
      readinessChecks:
        - type: None

    - name: configmap-cluster-info
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: cluster-info-cm
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: cluster-info
                namespace: default
              data: {}
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.data.clusterName
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.labels[tags.crossplane.io/account]
          toFieldPath: spec.forProvider.manifest.data.accountID
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.parameters.sourceCidrs[0]
          toFieldPath: spec.forProvider.manifest.data.sourceCidrs
          type: FromCompositeFieldPath

    - name: karpenter-default-provider
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: cluster-info-cm
        spec:
          # references:
          # - dependsOn:
          #     apiVersion: helm.crossplane.io/v1beta1
          #     kind: Release
          forProvider:
            manifest:
              apiVersion: karpenter.sh/v1alpha5
              kind: Provisioner
              metadata:
                name: default
              spec:
                requirements:
                  - key: "topology.kubernetes.io/zone"
                    operator: In
                    values: ["ap-southeast-2a"]

                  - key: karpenter.sh/capacity-type
                    operator: In
                    values: ["spot"]

                limits:
                  resources:
                    cpu: 20
                provider:
                  subnetSelector:
                    access: private
                  securityGroupSelector:
                    aws:eks:cluster-name: demo
                ttlSecondsAfterEmpty: 30

      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: "spec.forProvider.manifest.spec.provider.securityGroupSelector[aws:eks:cluster-name]"
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        # - fromFieldPath: spec.id
        #   toFieldPath: spec.references[0].dependsOn.name
        #   type: FromCompositeFieldPath
        #   transforms:
        #     - type: string
        #       string:
        #         fmt: "helm-karpenter-%s"
        #         type: Format

    #TODO: Remove this from here
    - name: letsencrypt-issuer-staging
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: letsencrypt-staging
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: letsencrypt-staging
              spec:
                acme:
                  server: https://acme-staging-v02.api.letsencrypt.org/directory
                  email: example@example.com
                  privateKeySecretRef:
                    name: letsencrypt-staging-key
                  solvers:
                    - http01:
                        ingress:
                          class: nginx

      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.parameters.email
          toFieldPath: spec.forProvider.manifest.spec.acme.email
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    #TODO: Remove this from here
    - name: letsencrypt-issuer-production
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: letsencrypt-production
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: letsencrypt
              spec:
                acme:
                  server: https://acme-v02.api.letsencrypt.org/directory
                  email: example@example.com
                  privateKeySecretRef:
                    name: letsencrypt-production-key
                  solvers:
                    - http01:
                        ingress:
                          class: nginx

      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.parameters.email
          toFieldPath: spec.forProvider.manifest.spec.acme.email
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: helm
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.uid
          toFieldPath: spec.credentials.secretRef.name
          type: FromCompositeFieldPath
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
      readinessChecks:
        - type: None

    - name: karpenter
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: karpenter
            chart:
              name: karpenter
              repository: https://charts.karpenter.sh/
              version: "0.11.1"
            values:
              nameOverride: karpenter
              fullnameOverride: karpenter
              clusterName: cluster
              clusterEndpoint: endpoint
              aws:
                defaultInstanceProfile: instance-profile
              serviceAccount:
                name: karpenter
                annotations: {}
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "helm-karpenter-%s"
              type: Format

          type: FromCompositeFieldPath
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.values.clusterName
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.values.aws.defaultInstanceProfile
          transforms:
          - type: string
            string:
              fmt: "karpenter-node-%s"
              type: Format
          type: FromCompositeFieldPath

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.labels[tags.crossplane.io/account]
              - fromFieldPath: spec.id
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:role/karpenter-%s"
          toFieldPath: "spec.forProvider.values.serviceAccount.annotations[eks.amazonaws.com/role-arn]"

    - name: argocd
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: argocd
            chart:
              name: argo-cd
              repository: https://argoproj.github.io/argo-helm
              version: "4.9.4"
            values:
              fullnameOverride: argocd
              global:
                image:
                  repository: quay.io/argoproj/argocd
              dex:
                image:
                  repository: ghcr.io/dexidp/dex
              redis:
                image:
                  repository: redis
              controller:
                args:
                  appResyncPeriod: 30
              server:
                extraArgs:
                  - "--insecure"
                ingress:
                  enabled: true
                  hosts:
                    - ingress.local
                  ingressClassName: nginx
                  annotations:
                    ingress.kubernetes.io/ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                    cert-manager.io/cluster-issuer: letsencrypt-staging
                  tls:
                      - hosts:
                          - ingress.local
                        secretName: letsencrypt-cert

      patches:
        - fromFieldPath: metadata.labels[tags.crossplane.io/account]
          toFieldPath: spec.forProvider.values.redis.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/docker.io/library/redis"
              type: Format

        - fromFieldPath: metadata.labels[tags.crossplane.io/account]
          toFieldPath: spec.forProvider.values.dex.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/ghcr.io/dexidp/dex"
              type: Format

        - fromFieldPath: metadata.labels[tags.crossplane.io/account]
          toFieldPath: spec.forProvider.values.global.image.repository
          type: FromCompositeFieldPath
          transforms:
          - type: string
            string:
              fmt: "%s.dkr.ecr.ap-southeast-2.amazonaws.com/quay.io/argoproj/argocd"
              type: Format

        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.id
              - fromFieldPath: spec.parameters.domain
            strategy: string
            string:
              fmt: "%s-argo.%s"
          toFieldPath: spec.forProvider.values.server.ingress.hosts[0]
          policy:
            fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.id
              - fromFieldPath: spec.parameters.domain
            strategy: string
            string:
              fmt: "%s-argo.%s"
          toFieldPath: spec.forProvider.values.server.ingress.tls[0].hosts[0]
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: bootstrap
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: argocd
            chart:
              name: bootstrap-cluster
              repository:  https://sanyu.github.io/helm-charts/
              version: "0.2.0"
            values:
              bootstrapPath: eks
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    # - name: nginx
    #   base:
    #     apiVersion: helm.crossplane.io/v1beta1
    #     kind: Release
    #     spec:
    #       rollbackLimit: 3
    #       forProvider:
    #         namespace: ingress-nginx
    #         chart:
    #           name: ingress-nginx
    #           repository: https://kubernetes.github.io/ingress-nginx
    #           version: "4.1.4"
    #         values:
    #           controller:
    #             service:
    #               # loadBalancerSourceRanges:
    #               #   - "0.0.0.0/0"
    #               annotations:
    #                 service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    #                 service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    #                 service.beta.kubernetes.io/aws-load-balancer-type: nlb
    #   patches:
    #     # - fromFieldPath: spec.parameters.sourceCidrs
    #     #   toFieldPath: spec.forProvider.values.controller.service.loadBalancerSourceRanges
    #     #   type: FromCompositeFieldPath
    #     - fromFieldPath: status.eks.endpoint
    #       toFieldPath: spec.forProvider.values.clusterEndpoint
    #       type: FromCompositeFieldPath
    #       policy:
    #         fromFieldPath: Required
    #
    #     - fromFieldPath: spec.id
    #       toFieldPath: spec.providerConfigRef.name
    #       type: FromCompositeFieldPath
    #       policy:
    #         fromFieldPath: Required

    #TODO: move external-dns out of here
    - name: external-dns
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: external-dns
            chart:
              name: external-dns
              repository: https://charts.bitnami.com/bitnami
              version: "6.5.6"
            values:
              image:
                registry: public.ecr.aws
              fullnameOverride: external-dns
              policy: sync
              aws:
                zoneType: public
                region: ap-southeast-2
              serviceAccount:
                name: external-dns
                annotations: {}
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.eks.endpoint
          toFieldPath: spec.forProvider.values.clusterEndpoint
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.labels[tags.crossplane.io/account]
              - fromFieldPath: spec.id
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:role/external-dns-%s"
          toFieldPath: "spec.forProvider.values.serviceAccount.annotations[eks.amazonaws.com/role-arn]"


    - name: irsa-external-dns
      base:
        apiVersion: iam.demo.com/v1alpha1
        kind: XIamRoleForServiceAccount
        spec:
          parameters:
            accountID: 1234
            clusterName: cluster
            OIDCProvider: oidc
            serviceAccountName: external-dns
            namespace: external-dns
            policyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "route53:ChangeResourceRecordSets"
                    ],
                    "Resource": [
                      "arn:aws:route53:::hostedzone/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "route53:ListHostedZones",
                      "route53:ListResourceRecordSets"
                    ],
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
      patches:
        - fromFieldPath: metadata.labels[tags.crossplane.io/account]
          toFieldPath: spec.parameters.accountID
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.parameters.clusterName
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.eks.iamoidc
          toFieldPath: spec.parameters.OIDCProvider
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: instance-profile-karpenter
      base:
        apiVersion: iam.aws.crossplane.io/v1alpha1
        kind: InstanceProfile
        spec:
          forProvider:
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "karpenter-node-%s"
              type: Format
          type: FromCompositeFieldPath

    - name: irsa-karpenter
      base:
        apiVersion: iam.demo.com/v1alpha1
        kind: XIamRoleForServiceAccount
        spec:
          parameters:
            serviceAccountName: karpenter
            namespace: karpenter
            policyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:CreateLaunchTemplate",
                      "ec2:CreateFleet",
                      "ec2:RunInstances",
                      "ec2:CreateTags",
                      "iam:PassRole",
                      "ec2:TerminateInstances",
                      "ec2:DeleteLaunchTemplate",
                      "ec2:DescribeLaunchTemplates",
                      "ec2:DescribeInstances",
                      "ec2:DescribeSecurityGroups",
                      "ec2:DescribeSubnets",
                      "ec2:DescribeInstanceTypes",
                      "ec2:DescribeInstanceTypeOfferings",
                      "ec2:DescribeAvailabilityZones",
                      "ssm:GetParameter",
                      "route53:ListHostedZones",
                      "route53:ListResourceRecordSets"
                    ],
                    "Resource": [
                      "*"
                    ]
                  }
                ]
              }
      patches:
        - fromFieldPath: metadata.labels[tags.crossplane.io/account]
          toFieldPath: spec.parameters.accountID
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: spec.id
          toFieldPath: spec.parameters.clusterName
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - fromFieldPath: status.eks.iamoidc
          toFieldPath: spec.parameters.OIDCProvider
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required
