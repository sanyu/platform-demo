apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks-cluster
  labels:
    provider: aws
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: demo.com/v1alpha1
    kind: XK8sCluster
  writeConnectionSecretsToNamespace: crossplane-system

  patchSets:
    - name: metadata
      patches:
        - fromFieldPath: metadata.labels
    - name: common-parameters
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"

  resources:
    - name: ekscluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            region: ap-southeast-2
            version: "1.22"
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
            resourcesVpcConfig:
              endpointPrivateAccess: true
              endpointPublicAccess: true
              publicAccessCidrs:
                - "0.0.0.0/0"
              subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  type: subnet
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.parameters.sourceCidrs
          toFieldPath: spec.forProvider.resourcesVpcConfig.publicAccessCidrs
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          type: FromCompositeFieldPath

        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.uid
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
          type: FromCompositeFieldPath

        - type: ToCompositeFieldPath
          fromFieldPath: spec.id
          toFieldPath: status.clusterName

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.status
          toFieldPath: status.controlPlaneStatus

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.eks.oidc
          policy:
            fromFieldPath: Optional

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.endpoint
          toFieldPath: status.eks.endpoint
          policy:
            fromFieldPath: Optional

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.version
          toFieldPath: status.eks.version
          policy:
            fromFieldPath: Optional

      readinessChecks:
      - type: MatchString
        fieldPath: status.atProvider.status
        matchString: ACTIVE
      connectionDetails:
        - fromConnectionSecretKey: kubeconfig

    - name: eksnodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            region: ap-southeast-2
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
            subnetSelector:
              matchControllerRef: true
              matchLabels:
                type: subnet
                access: private
            scalingConfig:
              minSize: 1
              maxSize: 5
              desiredSize: 1
            instanceTypes:
              - t3.medium
      patches:
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.status
        toFieldPath: status.nodePoolStatus
      readinessChecks:
      - type: MatchString
        fieldPath: status.atProvider.status
        matchString: ACTIVE

    - name: iamrole-controlplane
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: controlplane
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-controlplane-role"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: iamrole-nodegroup
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: nodegroup
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-nodegroup-role"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: iamattachment-controlplane
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane

    - name: iamattachment-service
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane

    - name: iamattachment-worker
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: iamattachment-cni
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: iamattachment-registry
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: vpc
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        metadata:
          labels:
            type: vpc
        spec:
          forProvider:
            region: ap-southeast-2
            enableDnsSupport: true
            enableDnsHostNames: true
            cidrBlock: 10.0.0.0/16
            tags:
            - key: Name
            - key: kubernetes.io/cluster/demo
              value: shared
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: sg-nodes
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: SecurityGroup
        spec:
          forProvider:
            description: Cluster communication with worker nodes
            groupName: demo
            region: ap-southeast-2
            vpcIdSelector:
              matchControllerRef: true
            egress:
            - fromPort: null
              toPort: null
              ipProtocol: "-1"
              ipRanges:
              - cidrIp: "0.0.0.0/0"

    - name: nodes-subnets-2a
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: ap-southeast-2a
            access: private
            type: subnet
        spec:
          forProvider:
            region: ap-southeast-2
            availabilityZone: ap-southeast-2a
            cidrBlock: 10.0.0.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIPOnLaunch: false
            tags:
              - key: Name
              - value: shared
              - key: access
                value: private
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-private-2a"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags[1].key
          type: FromCompositeFieldPath
          transforms:
            - type: string
              string:
                fmt: "kubernetes.io/cluster/%s"
                type: Format
          policy:
            fromFieldPath: Required

    - name: nodes-subnets-2b
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: ap-southeast-2b
            access: private
            type: subnet
        spec:
          forProvider:
            region: ap-southeast-2
            availabilityZone: ap-southeast-2b
            cidrBlock: 10.0.1.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIPOnLaunch: false
            tags:
              - key: Name
              - value: shared
              - key: access
                value: private
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-private-2b"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "kubernetes.io/cluster/%s"
                type: Format
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: nodes-subnets-public-2a
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: ap-southeast-2a
            access: public
            type: subnet
        spec:
          forProvider:
            region: ap-southeast-2
            availabilityZone: ap-southeast-2a
            cidrBlock: 10.0.200.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIPOnLaunch: false
            tags:
              - key: Name
              - key: access
                value: public
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-public-2a"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: nodes-subnets-public-2b
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: ap-southeast-2b
            access: public
            type: subnet
        spec:
          forProvider:
            region: ap-southeast-2
            availabilityZone: ap-southeast-2b
            cidrBlock: 10.0.201.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIPOnLaunch: false
            tags:
              - key: Name
              - key: access
                value: public
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-public-2b"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: gateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        metadata:
          labels:
            type: igw
        spec:
          forProvider:
            region: ap-southeast-2
            vpcIdSelector:
              matchControllerRef: true

    - name: elastic-ip-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Address
        metadata:
          labels:
            type: eip-1
        spec:
          forProvider:
            region: ap-southeast-2
            domain: vpc

    - name: elastic-ip-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Address
        metadata:
          labels:
            type: eip-2
        spec:
          forProvider:
            region: ap-southeast-2
            domain: vpc

    - name: natgateway-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: NATGateway
        metadata:
          labels:
            type: natgw-1
        spec:
          forProvider:
            region: ap-southeast-2
            allocationIdSelector:
              matchLabels:
                type: eip-1
            vpcIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchLabels:
                type: subnet
                access: public
                zone: ap-southeast-2a
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-nat-gateway-1"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: natgateway-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: NATGateway
        metadata:
          labels:
            type: natgw-2
        spec:
          forProvider:
            region: ap-southeast-2
            allocationIdSelector:
              matchLabels:
                type: eip-2
            vpcIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchLabels:
                type: subnet
                access: public
                zone: ap-southeast-2b
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-nat-gateway-2"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: routetable-public
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            region: ap-southeast-2
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
                gatewayIdSelector:
                  matchLabels:
                    type: igw
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    zone: ap-southeast-2a
                    access: public
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    zone: ap-southeast-2b
                    access: public
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-public-route-table"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: routetable-private-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            region: ap-southeast-2
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
                natGatewayIdSelector:
                  matchLabels:
                    type: natgw-1
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    zone: ap-southeast-2a
                    access: private
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-private-route-table-1"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required

    - name: routetable-private-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            region: ap-southeast-2
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
                natGatewayIdSelector:
                  matchLabels:
                    type: natgw-2
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    zone: ap-southeast-2b
                    access: private
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-private-route-table-2"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIDList:
              - sts.amazonaws.com
            thumbprintList:
              - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      name: oidcProvider
      patches:
        - fromFieldPath: status.eks.oidc
          toFieldPath: spec.forProvider.url
          policy:
            fromFieldPath: Required
          type: FromCompositeFieldPath

    - name: helm
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          type: FromCompositeFieldPath

        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
          type: FromCompositeFieldPath

        - fromFieldPath: metadata.uid
          toFieldPath: spec.credentials.secretRef.name
          type: FromCompositeFieldPath
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster"
                type: Format
      readinessChecks:
        - type: None

    - name: argocd
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: argocd
            chart:
              name: argo-cd
              repository: https://argoproj.github.io/argo-helm
              version: "4.9.4"
            values:
              controller:
                args:
                  appResyncPeriod: 30
              server:
                extraArgs:
                  - "--insecure"
                ingress:
                  enabled: true
                  hosts:
                    - ingress.local
                  ingressClassName: nginx
                  annotations:
                    ingress.kubernetes.io/ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                  #   cert-manager.io/cluster-issuer: letsencrypt
                  # tls:
                  #     - hosts:
                  #         - ingress.local
                  #       secretName: letsencrypt

      patches:

        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.id
              - fromFieldPath: spec.parameters.domain
            strategy: string
            string:
              fmt: "%s-argo.%s"
          toFieldPath: spec.forProvider.values.server.ingress.hosts[0]
          policy:
            fromFieldPath: Required

        # - type: CombineFromComposite
        #   combine:
        #     variables:
        #       - fromFieldPath: spec.id
        #       - fromFieldPath: spec.parameters.domain
        #     strategy: string
        #     string:
        #       fmt: "%s-argo.%s"
        #   toFieldPath: spec.forProvider.values.server.ingress.tls[0].hosts[0]
        #   policy:
        #     fromFieldPath: Required

    - name: bootstrap
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: argocd
            chart:
              name: bootstrap-cluster
              repository:  https://sanyu.github.io/helm-charts/
              version: "0.2.0"
            values:
              bootstrapPath: eks
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required

    - name: nginx
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: ingress-nginx
            chart:
              name: ingress-nginx
              repository: https://kubernetes.github.io/ingress-nginx
              version: "4.1.4"
            values:
              controller:
                service:
                  loadBalancerSourceRanges:
                    - "0.0.0.0/0"
                  annotations:
                    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
                    service.beta.kubernetes.io/aws-load-balancer-type: nlb
      patches:
        - fromFieldPath: spec.parameters.sourceCidrs
          toFieldPath: spec.forProvider.values.controller.service.loadBalancerSourceRanges
          type: FromCompositeFieldPath

        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
          policy:
            fromFieldPath: Required
